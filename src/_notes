HOW TO OPEN / CLOSE APP FILES

When an .app is packaged for MacOS, the actual executable binary is
stored inside /Contents/MacOS. In order to open that process,
the path is given to Command::new and then after script pauses for
a defined amount of time, child.kill() will close that process.


let mut mycommand = Command::new("./art-loop-content/example-p5-art-loop.app/Contents/MacOS/example-p5-art-loop");

if let Ok(mut child) = mycommand.spawn() {
    println!("command opened");
    sleep(Duration::from_millis( min_to_mil(sleep_time) ));
    child.kill().expect("command wasn't running");
    println!("command killed");
} else {
    println!("yes command didn't start");
}



let paths = fs::read_dir("./").unwrap();

for path in paths {
    //println!("Name: {}", path.unwrap().path().display())
    println!("Filename: {}", path.unwrap().path().file_stem().unwrap() );
}


// SIGTERM vs SIGKILL
write a bash script that rust app calls to SIGKILL?
https://stackoverflow.com/questions/49210815/how-do-i-send-a-signal-to-a-child-subprocess
